version: "3.8"

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=MAIL_HERE"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-certificates:/letsencrypt"
      - "traefik-config:/etc/traefik"
    labels:
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworigin=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Origin,Content-Type,Accept,Authorization"

  api:
    build: 
      context: .
      dockerfile: ./api/Dockerfile
    env_file: ./api/.env.docker
    restart: always
    volumes:
      - cdn:/var/www/cdn/bookcars
    depends_on:
      - mongo
    labels:
      - "traefik.http.routers.api.rule=Host(`api.plany.tn`)"
      - "traefik.http.services.api.loadbalancer.server.port=4002"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"

  mongo:
    image: mongo:latest
    command: mongod --quiet --logpath /dev/null
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: login
      MONGO_INITDB_ROOT_PASSWORD: changeme
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db # Ajoute un volume persistant

  backend:
    build: 
      context: .
      dockerfile: ./backend/Dockerfile
    depends_on:
      - api
    labels:
      - "traefik.http.routers.backend.rule=Host(`admin.plany.tn`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"

  frontend:
    build: 
      context: .
      dockerfile: ./frontend/Dockerfile
    depends_on:
      - api
    volumes:
      - cdn:/var/www/cdn/bookcars
    labels:
      - "traefik.http.routers.frontend.rule=Host(`plany.tn`, `www.plany.tn`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"

  cdn:
    image: nginx:alpine
    restart: always
    volumes:
      - cdn:/usr/share/nginx/html/cdn/bookcars
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Montez le fichier de configuration
      - ./nginx-cache:/var/cache/nginx  # Volume pour le cache nginx
    environment:
      - NGINX_PROXY_CACHE_VALID=200 30d  # Cache les réponses 200 pendant 30 jours
      - NGINX_PROXY_CACHE_USE_STALE=error timeout http_500 http_502 http_503 http_504  # Utilise le cache en cas d'erreur
      - NGINX_PROXY_CACHE_MIN_USES=1  # Cache après 1 utilisation
      - NGINX_CONF_GZIP=on  # Active la compression gzip
      - NGINX_CONF_GZIP_TYPES=image/jpeg image/png image/gif image/webp image/jpg  # Types de fichiers à compresser
      - NGINX_CONF_GZIP_COMP_LEVEL=6  # Niveau de compression (1-9)
      - NGINX_CONF_GZIP_MIN_LENGTH=200  # Taille minimale pour la compression
    labels:
      - "traefik.http.routers.cdn.rule=Host(`cdn.plany.tn`)"
      - "traefik.http.services.cdn.loadbalancer.server.port=80" 
      - "traefik.http.routers.cdn.entrypoints=websecure"
      - "traefik.http.routers.cdn.tls.certresolver=myresolver"
      - "traefik.http.middlewares.cdn-cache.headers.customResponseHeaders.Cache-Control=public,max-age=2592000"  # Cache côté client 30 jours
      - "traefik.http.middlewares.cdn-compress.compress=true"  # Active la compression au niveau de Traefik

volumes:
  cdn:
  traefik-certificates:
  traefik-config:
  mongo-data:
